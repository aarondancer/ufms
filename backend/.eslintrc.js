module.exports = {
  parser: "@typescript-eslint/parser",
  env: {
    jest: true,
    es6: true,
    node: true,
  },
  ignorePatterns: [".eslintrc.js"],
  parserOptions: {
    ecmaVersion: 2020,
    project: "./tsconfig.eslint.json",
    sourceType: "module",
  },
  extends: [
    "plugin:import/typescript",
    "plugin:prettier/recommended",
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:@typescript-eslint/eslint-recommended",
  ],
  plugins: ["@typescript-eslint", "prettier", "import", "promise"],
  rules: {
    "prettier/prettier": "off",
    /**
     * plugin:typescript-eslint
     */
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": ["error", { argsIgnorePattern: "^_" }],
    "@typescript-eslint/adjacent-overload-signatures": "error",
    "max-params": ["error", 7],
    "@typescript-eslint/ban-types": [
      "error",
      {
        types: {
          Object: {
            message: "Avoid using the `Object` type. Did you mean `object`?",
          },
          Function: {
            message:
              "Avoid using the `Function` type. Prefer a specific function type, like `() => void`.",
          },
          Boolean: {
            message: "Avoid using the `Boolean` type. Did you mean `boolean`?",
            fixWith: "boolean",
          },
          Number: {
            message: "Avoid using the `Number` type. Did you mean `number`?",
            fixWith: "number",
          },
          Symbol: {
            message: "Avoid using the `Symbol` type. Did you mean `symbol`?",
            fixWith: "symbol",
          },
          String: {
            message: "Avoid using the `String` type. Did you mean `string`?",
            fixWith: "string",
          },
          "{}": {
            message: "Use Record<K, V> instead",
            fixWith: "Record<K, V>",
          },
          object: {
            message: "Use Record<K, V> instead",
            fixWith: "Record<K, V>",
          },
        },
      },
    ],
    "@typescript-eslint/explicit-member-accessibility": [
      "off",
      {
        overrides: {
          constructors: "off",
        },
      },
    ],
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        multiline: {
          delimiter: "semi",
          requireLast: true,
        },
        singleline: {
          delimiter: "semi",
          requireLast: false,
        },
      },
    ],
    "@typescript-eslint/member-ordering": "off",
    "@typescript-eslint/no-angle-bracket-type-assertion": "off",
    "@typescript-eslint/no-empty-function": "error",
    "@typescript-eslint/no-unnecessary-condition": "error",
    "@typescript-eslint/no-confusing-non-null-assertion": "warn",
    "@typescript-eslint/no-duplicate-enum-values": "error",
    "@typescript-eslint/no-empty-interface": "error",
    "@typescript-eslint/no-unnecessary-type-assertion": "warn",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-inferrable-types": "error",
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/ban-ts-comment": "error",
    "@typescript-eslint/ban-tslint-comment": "error",
    "@typescript-eslint/consistent-indexed-object-style": "error",
    "@typescript-eslint/no-misused-new": "error",
    "@typescript-eslint/restrict-template-expressions": "off",
    "@typescript-eslint/no-require-imports": "error",
    "keyword-spacing": "off",
    "@typescript-eslint/keyword-spacing": "error",
    "@typescript-eslint/no-namespace": "error",
    "@typescript-eslint/no-this-alias": "error",
    "@typescript-eslint/no-use-before-define": "error",
    "@typescript-eslint/no-var-requires": "error",
    "@typescript-eslint/prefer-for-of": "error",
    "@typescript-eslint/prefer-function-type": "error",
    "@typescript-eslint/prefer-namespace-keyword": "error",
    "@typescript-eslint/semi": ["error", "always"],
    "@typescript-eslint/type-annotation-spacing": "error",
    "@typescript-eslint/unified-signatures": "error",
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-shadow": "error",
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unused-expressions": ["error"],
    /**
     * plugin:eslint
     */
    "no-await-in-loop": "error",
    "padding-line-between-statements": "off",
    "arrow-body-style": "off",
    "arrow-parens": "off",
    complexity: "off",
    "object-curly-spacing": "off",
    "no-multi-spaces": "off",
    "no-useless-return": "error",
    "no-else-return": "off",
    "no-implicit-coercion": "error",
    "constructor-super": "error",
    yoda: "error",
    strict: ["error", "never"],
    curly: "error",
    "dot-notation": "error",
    "eol-last": "error",
    eqeqeq: ["error", "smart"],
    "guard-for-in": "error",
    "id-match": "error",
    "max-classes-per-file": "off",
    "max-len": [
      "error",
      {
        code: 150,
      },
    ],
    "new-parens": "error",
    "no-bitwise": "error",
    "no-caller": "error",
    "no-cond-assign": "error",
    "no-constant-condition": "error",
    "no-dupe-else-if": "error",
    "no-console": [
      "error",
      {
        allow: [
          "info",
          "dirxml",
          "warn",
          "error",
          "dir",
          "timeLog",
          "assert",
          "clear",
          "count",
          "countReset",
          "group",
          "groupCollapsed",
          "groupEnd",
          "table",
          "Console",
          "markTimeline",
          "profile",
          "profileEnd",
          "timeline",
          "timelineEnd",
          "timeStamp",
          "context",
        ],
      },
    ],
    "no-debugger": "error",
    "no-duplicate-case": "error",
    "no-empty": "error",
    "no-eval": "error",
    "no-extra-bind": "error",
    "no-fallthrough": "error",
    "no-invalid-this": "error",
    "no-irregular-whitespace": "error",
    "no-new-func": "error",
    "no-new-wrappers": "error",
    "no-redeclare": "error",
    "no-return-await": "error",
    "no-sequences": "error",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "error",
    "no-shadow": "off",
    "no-throw-literal": "error",
    "no-trailing-spaces": "error",
    "no-undef-init": "error",
    "no-unsafe-finally": "error",
    "no-unused-labels": "error",
    "no-var": "error",
    "object-shorthand": "error",
    "prefer-const": "error",
    "prefer-object-spread": "error",
    "quote-props": ["error", "consistent-as-needed"],
    radix: "error",
    "use-isnan": "error",
    "valid-typeof": "off",
    "space-before-function-paren": "off",
  },
};
